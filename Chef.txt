=> A Resource represents a piece of infrastructure and its desired state, such as a package that should be installed, a service that should be running, 
   or a file that should be generated. A block of Resource can be considered as a Recipe
***** Chef-Server setup:  (Linux)*********
-chef-server instance should have atleast 1gb RAM
-/etc/hosts should contain only one entry of IP address
- add hostname /etc/hosts and /etc/sysconfig/network
  10.11.12.107    chef.mycompany.com
  $hostname chef.mycompany.com
  $hostname -f
  chef.mycompany.com
- Please restart server once above hostnme is setup.
  
- Login with normal user and this user should be in sudoers

- Download chef-server rpm and install it with below commands
	Download https://packages.chef.io/files/stable/chef-server/12.14.0/el/6/chef-server-core-12.14.0-1.el6.x86_64.rpm
	sudo rpm -ivh chef-server-core-12.3.0-1.el6.x86_64.rpm
-------------------
For Ubuntu:
	$ sudo dpkg -i /tmp/chef-server-core-<version>.deb
-------------------
	$sudo chef-server-ctl reconfigure


- Run below command to create user /etc/chef

	chef-server-ctl user-create srinivas srini Y srinivas@gmail.com srini123 --filename /home/vagrant/srinivas.pem
	chef-server-ctl user-create venkat sap Y venkat@gmail.com venkat --filename /home/vagrant/venkat.pem
	
	(sudo chef-server-ctl user-create sarahjohn sarah john sarah.john@gmail.com sarah123 --filename /home/vagrant/sarah.pem
	
	sudo chef-server-ctl user-create santoshpatel santosh patel santosh.patel@gmail.com santosh123 --filename /home/harry/santosh.pem
	
	sudo chef-server-ctl user-create user_name first_name last_name email password --filename FILE_NAME
	
	sudo chef-server-ctl user-create scmfeb scm feb scm.feb@gmail.com scm123 --filename /home/vagrant/scm.pem)
	
	
	
- Run below command to create organisation id
	
	chef-server-ctl org-create eis "EIS India Pvt Ltd." --association_user srinivas --filename /home/vagrant/srinivas-validator.pem

	chef-server-ctl org-create veneis "ven EIS India Pvt Ltd." --association_user venkat  --filename /home/vagrant/venkat-validator.pem
	
	(sudo chef-server-ctl org-create scm-training "SCMTraining Software, Inc." --association_user sarahjohn --filename /home/vagrant/scm-validator.pem
	
	sudo chef-server-ctl org-create devops-training "DEVOPSTraining Software, Inc." --association_user santoshpatel --filename /home/harry/devops-validator.pem
	
	sudo chef-server-ctl org-create devops-feb1 "DEVOPSTraining Software, Inc." --association_user scmfeb --filename /home/vagrant/feb12015-validator.pem)
	
=> Install packages

- Chef Manage 	
- Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.
$ chef-server-ctl install chef-manage
$ chef-server-ctl reconfigure
$ x`

- Chef Push Jobs: Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run. On the Chef server, run:
$ yum install opscode-manage
$ chef-server-ctl install opscode-push-jobs-server
$ chef-server-ctl reconfigure
$ opscode-push-jobs-server-ctl reconfigure

- Reporting: Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. 
  Run Reporting with Chef management console to view reports from a web user interface.
- On the Chef server, run:

$ chef-server-ctl install opscode-reporting
$ chef-server-ctl reconfigure
$ opscode-reporting-ctl reconfigure



--------  Old ---------------------	
sudo yum update
	sudo yum install opscode-manage
	#sudo chef-server-ctl install opscode-manage
	sudo opscode-manage-ctl reconfigure
	sudo chef-server-ctl reconfigure
-----------------------------------------	
	Try this way incase if you dont find opscode-manage in yum repository
		curl -s https://packagecloud.io/install/repositories/chef/stable/script.rpm.sh | sudo bash
		rpm -qlp opscode-manage.rpm
		sudo yum install opscode-manage
		sudo chef-manage-ctl reconfigure
 
- Verify the chef server by logging below URL in browser
	https://chef.mycompany.com/  (sarahjohn/sarah123)
	
 Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface
 
 
*********************************************Chef-Work station setup: ( Linux)*******************************************************************************
- add chef server host name & IP in /etc/hosts like below

192.168.33.21 chefworkstation.eis.com
192.168.33.20 chefserver.eis.com

- Install the development kit with a normal user having sudo access
- Download the chef SDK in a CentOS instace
  wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.10.0-1.el6.x86_64.rpm
- Install the above downloaded rpm file which will enable chef commands in Workstation
  sudo rpm -ivh chefdk-0.10.0-1.el6.x86_64.rpm
  verify the installation with chef --version
	[vagrant@localhost vagrant]$ chef --version
	Chef Development Kit Version: 0.10.0
	chef-client version: 12.5.1
	berks version: 4.0.1
	kitchen version: 1.4.2
----------- New One ------------
Chef Development Kit Version: 2.3.4
chef-client version: 13.4.19
delivery version: master (73ebb72a6c42b3d2ff5370c476be800fee7e5427)
berks version: 6.3.1
kitchen version: 1.17.0
inspec version: 1.36.1
-----------

- Login to your chef server with above credentials
	https://192.168.33.50   (sarahjohn/sarah123)
	

-now check in workstation using command "# knife ssl check"
- now we will get following message

######### message start #############
(
Connecting to host chef.nobelit.com:443
ERROR: The SSL certificate of chef.nobelit.com could not be verified
Certificate issuer data: /CN=dnsme

Configuration Info:

OpenSSL Configuration:
* Version: OpenSSL 1.0.1p 9 Jul 2015
* Certificate file: /opt/chefdk/embedded/ssl/cert.pem
* Certificate directory: /opt/chefdk/embedded/ssl/certs
Chef SSL Configuration:
* ssl_ca_path: nil
* ssl_ca_file: nil
* trusted_certs_dir: "/home/chef-repo/.chef/trusted_certs"

TO FIX THIS ERROR:

If the server you are connecting to uses a self-signed certificate, you must
configure chef to trust that server's certificate.

By default, the certificate is stored in the following location on the host
where your chef-server runs:

  /var/opt/opscode/nginx/ca/SERVER_HOSTNAME.crt

Copy that file to your trusted_certs_dir (currently: /home/chef-repo/.chef/trusted_certs)
using SSH/SCP or some other secure method, then re-run this command to confirm
that the server's certificate is now trusted.
)

######### message end #############
- now go to  " /var/opt/opscode/nginx/ca/ " server path and check the .crt file
- copy that file from server(Now you are in server) to workstation using following command 
Syntax: scp -r file(.crt) root@ipaddress:/home 

Ex: 
################# Ex:##############  
scp -r chefserver.eis.com.crt root@192.168.33.21:/home/
The authenticity of host '192.168.33.21 (192.168.33.21)' can't be established.
RSA key fingerprint is c6:c7:b3:97:ed:35:42:78:b6:22:40:1d:fd:d7:92:b1.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.33.21' (RSA) to the list of known hosts.
root@192.168.33.21's password:
chefserver.eis.com.crt      
#########################################

If you get error

Run this command # knife ssl fetch
Than you will get below error 

############# error ###############
WARNING: Certificates from chefserver.eis.com will be fetched and placed in your trusted_cert
directory (/home/chef-repo/.chef/trusted_certs).

Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.

Adding certificate for chefserver.eis.com in /home/chef-repo/.chef/trusted_certs/chefserver_eis_com.crt
#################

use below command 
# hostname -f /etc/hosts

[root@chefworkstation .chef]# knife ssl check
Connecting to host chefserver.eis.com:443
Successfully verified certificates from `chefserver.eis.com'
- Navigate to Organisation -> Administration-> Click on start kit and you should find a button to dowload the starter kit
- unzip the starter kit, this will create chef-repo directory at home location
- run below commands
  cd ~/chef-repo
  get the key from chef server at below location and copy to chef-repo/.chef/trusted-certs
  /home/vagrant/chef-repo/.chef/trusted_certs
  $knife ssl check
  $knife ssl fetch
  $knife client list

  FOR MAC: 
  https://opscode-omnibus-packages.s3.amazonaws.com/mac_os_x/10.8/x86_64/chefdk-0.4.0-1.dmg
  Login to https://vapps1.konylabs.net/  ( harrypotter/harry123)
  click on organisation-> starter kit -> Downlaod starter kit
  unzip the starter kit, this will create chef-repo directory at home location
  run below commands
  cd ~/chef-repo
  $knife ssl fetch
  $knife client list
    chef-validator
   
****************** Working on Workstation to upload a cookbook to server and deploy on node **********************************************************
=>Add node to chef server from workstation. use command in workstation. Now it will install chef clinet in node(/etc/chef) and get all the information from node.
  It will show everything on attribute section I webpage
  $ knife bootstrap  192.168.33.14 -x root -P password -N "checfnode1.com" 
  $ knife bootstrap  192.168.33.14 -x root -P password -N "checfnode1.com"
  Syn: $ knife bootstrap  <ip Address> -x <user name> -P password -N <node name>
- When you use bootstrap command for add node that time "/home/vagrant/srinivas-validator.pem" file copy  from the server to node "/etc/chef/validator.pem" (changed it as "validator.pem")
- when we use chef-client it will authenticate to the server using this files

- we can check the node 
- $ knife node show <nodename>
- $ knife node show <nodename> -l
- $ knife search node "platform:centos" (it will give which node having centos OS)
- $ knife ssh "role:webserver" "uptime" -x root

=> Create cookbook and upload into the server. you are in /root/chef-repo 
-  $ knife cookbook create sampletest (latest version will work : $ chef generate cookbook sampletest )
- Now it will create in "/root/chef-repo/cookbooks/sampletest" now go to "/root/chef-repo/cookbooks/sampletest/recipes". Open "default.rb". Write simple script
-------
file 'sample.txt' do
        content 'hello world'
end
-------
-  now upload sampletest cookbook from "/root/chef-repo/"
- $ knife cookbook upload sampletest
- $ knife cookbook list
- Uploading any cookbook will take the version 0.1.0 first time
- add runlist to node 
- $ knife node run_list add checfnode1.com "recipe[sampletest]"
- Syn: knife node run_list add <node name> "recipe[<cookbook name>]"
- ssh-keygen -t rsa
- If knife command not found in chef workstation export knife bin path.
  $ export PATH=$PATH:/opt/chefdk/bin/ 
- $ knife role show <rolename>
- & knife search role "run_list:recipe\[apache\]"
- 2 roles having Same recipe ex apache and both roles are assigned to node1. Now apache will run only one-time 2nd time will skip it  
- Single role having multiple recipe, will run only one
 





- we can download cookbooks from https://supermarket.chef.io/ 
- search cookbook what you want 
Ex: if we want java than go to above link search "java", it will show the result like
Res:
---------------
Installs Oracle's Java SE JDK
cookbook 'java_se', '~> 8.144.0'
--------------
- take "java_se" this and use command : knife cookbook site download java_se

	knife cookbook site download learn_chef_httpd
	tar -zxvf learn_chef_httpd-0.1.0.tar.gz -C cookbooks
	rm learn_chef_httpd*.tar.gz
	mv learn_chef_httpd cookbooks/
	knife cookbook upload learn_chef_httpd
	knife cookbook list
	
  knife bootstrap  192.168.33.32 --ssh-user vagrant --ssh-password 'vagrant' --sudo --use-sudo-password --node-name node32 --run-list 'recipe[learn_chef_httpd]' 

knife bootstrap INSTANCE_IP_ADDRESS -N INSTANCE_NAME -x USER_NAME --sudo --run-list "recipe[apache2]"
 Ex: knife bootstrap 192.168.33.14 -x root 
    Note: Make sure the node hosts file has the server dns pointed to the server IP
-- Install tomat
	knife cookbook site download tomcat7
	knife cookbook upload tomcat7
	knife cookbook list
	
-- Important concepts/keywords
package- Used to manage packages on a node
service- Used to manage services on a node
user- Manage users on the node
group- Manage groups
template- Manage files with embedded ruby templates
cookbook_file- Transfer files from the files subdirectory in the cookbook to a location on the node
file- Manage contents of a file on node
directory- Manage directories on node
execute- Execute a command on the node
cron- Edit an existing cron file on the node

---------------------------------------------




-- Roles and Environments:
	Nice explanation form digital ocean below
https://www.digitalocean.com/community/tutorials/how-to-use-roles-and-environments-in-chef-to-control-server-configurations

Roles:
-----
Chef's view of roles is almost entirely the same as the regular definition. A role in Chef is a categorization that describes what a specific 
machine is supposed to do. What responsibilities does it have and what software and settings should be given to it.
- we have "roles" folder in chef-repo, Create "roles" folder if it is not there.
- A role as : name, description, run_list
- go to roles folder & create 1) Json file below with OR 2) web_server.rb using chef DSL script. 

- Create a role in two ways ( either json file DSL Ruby file)
	
	1) Json file below with 
	$ knife role create test
	export EDITOR=vi
	-----------------------------------
			{
		  "name": "web_server",
		  "description": "A role to configure our front-line web servers",
		  "json_class": "Chef::Role",
		  "default_attributes": {
				"nginx": {
							  "log_location": "/var/log/nginx.log"
						 }
		  },
		  "override_attributes": {
				"nginx": {
							  "gzip": "on"
						}
		  },
		  "chef_type": "role",
		  "run_list": [
			"recipe[apt]",
			"recipe[nginx]"
		  ],
		  "env_run_lists": {

			  "production": [
			  "recipe[nginx::config_prod]"
			],

			"testing": [
			  "recipe[nginx::config_test]"
			]

		  }
		}
	---------------------------------------------
	The above role with json will directly creates on server, so no need to upload
	upload it using below command to chef server
		$knife role from file web_server.json
	
	2) Using chef DSL script
		vi web_server.rb
		add below contents to the web_server.rb file
		------------------------------
		name "web_server"
		description "A role to configure our front-line web servers"
		run_list "recipe[apt]", "recipe[nginx]"
		env_run_lists "production" => ["recipe[nginx::config_prod]"], "testing" => ["recipe[nginx::config_test]"]
		default_attributes "nginx" => { "log_location" => "/var/log/nginx.log" }
		override_attributes "nginx" => { "gzip" => "on" }
		------------------------------
		upload it using below command to chef server
		$knife role from file web_server.rb
		
		$knife role show <node name>
		$knife role show webservernode
	- Remove the run list from the node
		$knife node run list remove <node name> 'name of list'
		$knife node run list remove webservernode  'recipe[apt]'
	- add the run list from the node
		$knife node run list add <node name> 'name of list'
		$knife node run list add webservernode  'recipe[apache]'



-> Assign the role to a node
	Check the list if nodes
	$knife node list
	node32
	edit the node configs to assign role
	$knife node edit node32
	--------------------------
	{
		  "name": "node32",
		  "chef_environment": "_default",
		  "normal": {
			"tags": [

			]
		  },
		  "run_list": [
		  "role[web_server]"
		]
	}
	--------------------------------
	Thats it now instead of recipies we added a role to the node
-> To search list of nodes with given role, we can use below command
	knife search "role:web_server AND chef_environment:_default" -a name
	$knife role show <node name>
	$knife role show webservernode


re
	
Environments:
-------------
	In some ways, environments are fairly similar to roles. They are also used to differentiate different servers, but instead of 
	differentiating by the function of the server, environments differentiate by the phase of development that a machine belongs to.

Create an Environments
- check default Environments
	$ knife environment show _default
	$ knife environment list

	mkdir ~/chef-repo/environments
	cd ~/chef-repo/environments
	Same as role we can create it with ruby DSL or json file using knife directly on server
	
	knife environment create development
	----------------
			{
		  "name": "development",
		  "description": "The master development branch",
		  "cookbook_versions": {
			"nginx": "<= 1.1.0",
			"apt": "= 0.0.1"
		  },
		  "json_class": "Cheff:Environment",
		  "chef_type": "environment",
		  "default_attributes": {
		  },
		  "override_attributes": {
			"nginx": {
			  "listen": [
				"80",
				"443"
			  ]
			},
			"mysql": {
			  "root_pass": "root"
			}
		  }
		}
	---------------------
	
	we can upload it with the help of ruby DSL file as well
	------------------------
			name "development"
		description "The master development branch"
		cookbook_versions({
			"nginx" => ">= 1.1.0",
			"apt" => ">= 0.0.1"
		})
		override_attributes ({
			"nginx" => {
				"listen" => [ "80", "443" ]
			},
			"mysql" => {
				"root_pass" => "root"
			}
		})
	---------------------------
	Upload it with below command to server
	$knife environment from file ~/chef-repo/environments/development.rb
--> Assign an environment to node
	$knife node edit node32
	
	
Apply the role to node and bootstrap the node:-
----------------------------------------------
-> Make sure you have uploaded all required cookbooks to chef-server
	knife cookbook site download apt
	knife cookbook upload apt 
	there are few more dependent cookbooks required so upload all to chef server
################
add node to chefserver from chef work satation

knife bootstrap  192.168.33.14 --ssh-user vagrant --ssh-password 'vagrant' --sudo --use-sudo-password --node-name checfnode1

####################

knife bootstrap  192.168.33.32 --ssh-user vagrant --ssh-password 'vagrant' --sudo --use-sudo-password --node-name node32 --run-list 'role[web_server]'

knife bootstrap  192.168.33.22 --ssh-user vagrant --ssh-password 'vagrant' --sudo --use-sudo-password --node-name chefnode1 --run-list 'role[srinibook1]'
	 
Data bags:
--------=

check data bag

$ knife data bag list

	A data bag is a collection of bits of JSON called data bag items, indexed by an ID, that Chef allows us to use and search in our recipes. 
 	Let's use knife to create our data bags. Type the following on your workstation to create a data bag called wp-sites.

	$ knife data bag create wp-sites
	now edit the data bag with a name website1
	knife data bag create wp-sites website1
	-----
	{
	  "id": "website1",
	  "host": "website1.example.com",
	  "database": "website1",
	  "db_username": "website1",
	  "db_password": "212b09752d173876a84d374333ae1ffe"
	}
	-----------------------
	How to use databags in recipies
	
	--------------
	sites = data_bag("wp-sites")
	sites.each do |site|
		opts = data_bag_item("wp-sites", site)

		  mysql_database opts["database"] do
			connection ({:host => 'localhost', :username => 'root', :password => node['mysql']['server_root_password']})
			action :create
		  end
	----------------------

-------------------	


